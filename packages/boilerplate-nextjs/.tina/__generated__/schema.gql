# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  ingredient(relativePath: String): Ingredient!
  ingredientConnection(before: String, after: String, first: Float, last: Float, sort: String): IngredientConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  recipe(relativePath: String): Recipe!
  recipeConnection(before: String, after: String, first: Float, last: Float, sort: String): RecipeConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Ingredient | Page | Recipe

type Ingredient implements Node & Document {
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type IngredientConnectionEdges {
  cursor: String!
  node: Ingredient
}

type IngredientConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [IngredientConnectionEdges]
}

type Page implements Node & Document {
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Recipe implements Node & Document {
  title: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type RecipeConnectionEdges {
  cursor: String!
  node: Recipe
}

type RecipeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [RecipeConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateIngredient(relativePath: String!, params: IngredientMutation!): Ingredient!
  createIngredient(relativePath: String!, params: IngredientMutation!): Ingredient!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateRecipe(relativePath: String!, params: RecipeMutation!): Recipe!
  createRecipe(relativePath: String!, params: RecipeMutation!): Recipe!
}

input DocumentMutation {
  ingredient: IngredientMutation
  page: PageMutation
  recipe: RecipeMutation
}

input IngredientMutation {
  body: JSON
}

input PageMutation {
  body: JSON
}

input RecipeMutation {
  title: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  