import type { AxiosError } from 'axios'
import type { NextPage } from 'next'
import type { AppProps } from 'next/app'
import type { ReactNode } from 'react'
import { Box, ChakraProvider, VStack } from '@chakra-ui/react'
import { QueryCache, QueryClient, QueryClientProvider } from 'react-query'
import { RecoilRoot } from 'recoil'
import Head from 'next/head'
import dynamic from 'next/dynamic'

import SectionFooter from '../views/section-footer'
import SectionHeader from '../views/section-header'
import SystemToastErrors, { streamErrors } from '../views/system-toast-errors'
import SystemToastNotifications from '../views/system-toast-notifications'
import makeServer from '../services/make-server'

if ((process.env.NEXT_PUBLIC_ENV ?? process.env.NODE_ENV) === 'development') {
  makeServer({ environment: process.env.NODE_ENV ?? 'development' })
}

interface Props extends AppProps {
  Component: NextPage & {
    getLayout?: (page: ReactNode) => ReactNode
  }
}

const queryClient = new QueryClient({
  queryCache: new QueryCache({ onError: (error: unknown) => streamErrors.actions.addError(error as Error) }),
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      useErrorBoundary: (error: unknown) => ((error as AxiosError).response?.status ?? 0) >= 500,
    },
  },
})

function getLayoutDefault(page: ReactNode) {
  return (
    <>
      <SectionHeader />
      {page}
      <Box flex="1" sx={{ marginTop: '0 !important' }} />
      <SectionFooter />
    </>
  )
}

function MyApp(props: Props) {
  const { Component } = props
  const getLayout = Component.getLayout || getLayoutDefault

  return (
    <RecoilRoot>
      <QueryClientProvider client={queryClient}>
        <ChakraProvider>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <SystemToastErrors />

          <SystemToastNotifications />

          <VStack alignItems="stretch" minHeight="100vh" spacing="10">
            {getLayout(<Component {...props.pageProps} />)}
          </VStack>
        </ChakraProvider>
      </QueryClientProvider>
    </RecoilRoot>
  )
}

export default dynamic(() => Promise.resolve(MyApp), {
  ssr: false,
})
